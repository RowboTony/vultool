name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  GOSEC_VERSION: '2.19.0'
  GOLANGCI_LINT_VERSION: 'v1.55.2'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        go-version: ['1.21.x', '1.22.x', '1.23.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Download dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run tests
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-22.04' && matrix.go-version == '1.23.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m --verbose
        skip-cache: false
        skip-save-cache: false
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'go fmt ./...' to fix formatting"
          exit 1
        fi
    
    - name: Check imports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "The following files have unorganized imports:"
          goimports -l .
          echo "Please run 'goimports -w .' to fix imports"
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Run gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -stdout -verbose=text ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        category: gosec
    
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
    
    - name: Upload gosec results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gosec-results
        path: gosec.sarif
        retention-days: 30

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            goos: linux
            goarch: amd64
          - os: ubuntu-22.04
            goos: linux
            goarch: arm64
          - os: macos-13
            goos: darwin
            goarch: amd64
          - os: macos-13
            goos: darwin
            goarch: arm64
          - os: windows-2022
            goos: windows
            goarch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=$(cat VERSION)
        BINARY_NAME=vultool
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags "-X main.version=${VERSION} -s -w" -o ${BINARY_NAME} ./cmd/vultool
        
        # Log binary size for monitoring
        ls -lh ${BINARY_NAME}
    
    - name: Test binary functionality
      # Only test on native platform to avoid cross-compilation issues
      if: (matrix.goos == 'linux' && matrix.os == 'ubuntu-22.04' && matrix.goarch == 'amd64') || (matrix.goos == 'darwin' && matrix.os == 'macos-13' && matrix.goarch == 'amd64') || (matrix.goos == 'windows' && matrix.os == 'windows-2022')
      run: |
        BINARY_NAME=vultool
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        ./${BINARY_NAME} --version
        echo "Binary test successful for ${{ matrix.goos }}/${{ matrix.goarch }}"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vultool-${{ matrix.goos }}-${{ matrix.goarch }}
        path: vultool*
        retention-days: 7

  validate:
    name: Validate
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Build vultool
      run: |
        VERSION=$(cat VERSION)
        go build -ldflags "-X main.version=${VERSION}" -o vultool ./cmd/vultool
    
    - name: Initialize test fixtures
      run: |
        make fixtures || echo "Warning: Could not initialize fixtures, skipping fixture validation"
    
    - name: Run validation tests
      run: |
        if [ -d "test/fixtures" ] && [ "$(ls -A test/fixtures)" ]; then
          echo "Running validation with fixtures..."
          make validate
        else
          echo "No fixtures available, running basic validation..."
          ./vultool --version
          echo "Basic validation completed successfully"
        fi
    
    - name: Test CLI functionality
      if: success()
      run: |
        echo "Testing CLI help system..."
        ./vultool --help
        ./vultool inspect --help
        echo "CLI validation completed successfully"

  # Quality gate - all checks must pass
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-22.04
    needs: [test, lint, security, build, validate]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "❌ Linting failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "❌ Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ Build failed"
          exit 1
        fi
        if [[ "${{ needs.validate.result }}" != "success" ]]; then
          echo "❌ Validation failed"
          exit 1
        fi
        echo "✅ All quality gates passed!"
